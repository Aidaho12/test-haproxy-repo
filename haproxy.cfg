global
    log         127.0.0.2 local2
    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     1
    daemon
    stats socket /var/lib/haproxy/stats
    stats socket *:1999 level admin
    stats socket /var/run/haproxy.sock mode 600 level admin
    server-state-file /etc/haproxy/haproxy.state
	master-worker


defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 10
    timeout http-request    10s
    timeout queue           1m
    timeout connect         15s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 30000


listen stats
    bind *:8085
	#option http-use-htx
	http-request use-service prometheus-exporter if { path /metrics }
    stats enable
    stats uri /stats
    stats realm HAProxy-04\ Statistics
    stats auth admin:password
    stats admin if TRUE


cache test_80
   total-max-size 4
   max-age 24000


userlist test
    group test_group
    group test_group2
    user user_test insecure-password pass groups test_group
    user user_test2 insecure-password pass2

listen test_85
    bind abns@haproxy-http accept-proxy
    mode http
    maxconn 500000
    balance roundrobin

	acl url_admin path_beg /admin
  	acl basic_auth http_auth(test)
	http-request auth realm AuthYourself if url_admin !basic_auth

    server 127.0.0.6 127.0.0.77:80



backend backend_87
    mode http
	balance roundrobin
    server 127.0.0.9 127.0.0.1:443 check maxconn 200 disabled
	server 127.0.0.210 127.0.0.2:443 check maxconn 200
	server 127.0.0.3 127.0.0.3:4443 check maxconn 30	



backend backend_88
    mode http
	balance roundrobin
    server 127.0.0.19 127.0.0.1:443 check maxconn 10000
	server 127.0.0.20 127.0.0.2:443 check maxconn 10000


backend backend_89
    mode http
	balance roundrobin
    server 127.0.0.191 127.0.0.1:443 check maxconn 10000
	server 127.0.0.201 127.0.0.2:443 check maxconn 10000
    server 127.0.0.111 127.0.0.1:443 check maxconn 10000
	server 127.0.0.221 127.0.0.2:443 check maxconn 100


frontend frontend_87
    bind *:87
    mode http
    maxconn 100
    http-request cache-use test_80
    http-response cache-store test_80
    default_backend backend_87

    use_backend per_ip_rates if { hdr_beg(host) -i site.com } 


frontend frontend_88
    bind *:88
    mode http
    maxconn 20000
    http-request cache-use test_80
    http-response cache-store test_80
    default_backend backend_88


backend per_ip_and_url_rates
    stick-table type binary len 8 size 1m expire 24h store http_req_rate(24h)

backend per_ip_rates
    stick-table type ip size 1m expire 24h store gpc0,gpc0_rate(30s)	


peers mypeers
	peer demo 127.0.0.1:1024
	peer haproxy 127.0.0.2:1024


userlist user_list
    user 123 insecure-password 123

listen test_91
    bind *:91
    mode http
    maxconn 2000
    balance roundrobin
    server 127.0.0.1 127.0.0.1:8085 maxconn 200 check

listen test_92
    bind *:92
    mode http
    maxconn 2000
    balance roundrobin
    server 127.0.0.1 127.0.0.1:898 maxconn 200 check
    server 127.0.0.2 127.0.0.2:500 maxconn 200 check

userlist basic
    user test insecure-password test

# BEGIN ANSIBLE MANAGED BLOCK
backend waf
    mode tcp
    fullconn   2000
    timeout connect 5s
    timeout server  3m
    server waf 127.0.0.1:12345 check
# END ANSIBLE MANAGED BLOCK

frontend vibrations
    bind *:443 
    mode tcp
    maxconn 2000
    http-request set-header X-Forwarded-Port %[dst_port] 
    http-request add-header X-Forwarded-Proto https if { ssl_fc } 
    redirect scheme https if !{ ssl_fc } 
    
    filter compression
    compression algo gzip
    compression type text/html text/plain text/css


